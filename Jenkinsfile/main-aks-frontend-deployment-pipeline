pipeline {
    agent {
        label 'master'
    }
    
    tools {
        maven 'maven'
    }
    
    environment {
        // Define ACR details
        REGISTRY_URL = 'sa1acrind.azurecr.io'
        REGISTRY_CREDENTIAL = 'evwercredentials_ACR' // Credential ID for ACR in Jenkins
        RESOURCE_GROUP = 'sa1_dev_eic_ip_implementation'
        CLUSTER_NAME = 'sa18swapd'
        KUBECONFIG_PATH = 'kubeconfig'
        ARM_CREDENTIALS_ID = 'evwer-azure'
    }
    
    stages {
    
        stage('Cleanup') {
    steps {
        cleanWs()
    }
}

        stage('Checkout') {
            steps {
                // Assuming you have configured your Jenkins job to have the Bitbucket credentials
                checkout scmGit(branches: [[name: '*/Reports']], extensions: [], userRemoteConfigs: [[credentialsId: 'evwereic2', url: 'https://amit_singh_eic@bitbucket.org/arrowit/ev-ip-implementation.git']])
            }
        }

 //       stage('git checkout for Docker files') {
//            steps {
//        dir('docker') {
//            git branch: 'feature/vtn_testing_apis', credentialsId: 'evwereic2', url: 'https://amit_singh_eic@bitbucket.org/arrowit/ev-ip-implementation.git'
//            }
//        }
//   }
//        stage('Build Maven Project') {
//           steps {
//               dir('docker/API/evwer') {
//                sh 'mvn install'
//                }
//            }
//        }
        stage('Build Docker Images') {
            steps {
            dir('React-Js/') {
                script {
                    // Define your images and their respective Dockerfiles here
                    def images = [
                        [name: 'frontend', dockerfile: 'Dockerfile'],
                    ]
                    
                    images.each { img ->
                        def imageName = "${REGISTRY_URL}/${img.name}:${env.BUILD_ID}"
                        docker.build(imageName, "-f ${img.dockerfile} .").push()
                        }
                    }
                }
            }
        }
        stage('Login to AKS') {
            steps {
          script {
            withCredentials([azureServicePrincipal(credentialsId: ARM_CREDENTIALS_ID)]) {
                sh "az login --service-principal -u \$ARM_CLIENT_ID -p \$ARM_CLIENT_SECRET --tenant \$ARM_TENANT_ID"
            }
            
            // Retrieve and set the subscription ID for az command context
            def subscriptionId = '664b6097-19f2-42a3-be95-a4a6b4069f6b' // <--- You need to replace this with your actual subscription ID
            sh "az account set --subscription ${subscriptionId}"

            sh "az aks get-credentials --resource-group ${RESOURCE_GROUP} --name ${CLUSTER_NAME} --overwrite-existing"
            }
        }
    }

    
        stage('git checkout for deployment file') {
            steps {
            git branch: 'feature/206387_DevOps_activity', credentialsId: 'evwereic2', url: 'https://amit_singh_eic@bitbucket.org/arrowit/ev-ip-implementation.git'
            }
        }   

    
         stage('Deploy to AKS') {
    steps {
        // Assuming 'AKS-Deployments' is at the root of your checked-out repository
        dir('devops/AKS-Deployments') {
            script {
                echo "Current Directory: ${pwd()}"
                echo "Contents of Directory:"
                sh 'ls -la'

                // Update the Kubernetes deployment YAML with the new image tag
                sh '''
                   sed -i "s|sa1acrind.azurecr.io/frontend:.*|sa1acrind.azurecr.io/frontend:${BUILD_ID}|g" frontend-deployment.yaml
                   '''

                // Apply the deployment using the correct relative path
                sh 'kubectl apply -f frontend-deployment.yaml'
             //   sh 'kubectl apply -f frontend-service.yaml'
            }
        }
    }
}

    }
}
